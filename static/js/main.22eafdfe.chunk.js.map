{"version":3,"sources":["components/form.js","components/weather.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temperature","tempMax","tempMin","humidity","pressure","description","error","Chart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","ChartData","es","data","options","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","API_KEY","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api","data1","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","main","setState","arrayy","temp","temp_max","temp_min","sys","weather","stop","_x","apply","arguments","charData","getChartData","labels","datasets","label","backgroundColor","components_form","components_Chart","Location","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22eafdfe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css'\r\nconst Form =(props)=>{    \r\n        return ( \r\n            <form onSubmit={props.getWeather}>\r\n           <input type=\"text\" name=\"city\" placeholder=\"Your City...\"/>\r\n           <input type=\"text\" name=\"country\" placeholder=\"Your Country...\"/>\r\n           <button>Get Weather</button>\r\n           </form>\r\n         )\r\n}\r\nexport default Form;","import React from 'react';\r\nimport '../App.css';\r\nconst Weather =(props)=> {\r\n        return ( \r\n            <div className=\"info\">\r\n              {\r\n                props.city && <p className=\"info-key\">City: \r\n                <span className=\"info-value\"> {props.city}</span> \r\n                </p>\r\n              }\r\n              {\r\n                props.country && <p className=\"info-key\">Country: \r\n                <span className=\"info-value\"> {props.country}</span>\r\n                 </p>\r\n              }\r\n              {\r\n                props.temperature && <p className=\"info-key\"> Temperatue: \r\n                <span className=\"info-value\"> {props.temperature-273.15}</span>\r\n                 </p> \r\n              }\r\n              {\r\n                props.tempMax && <p className=\"info-key\"> MaximuTemperatue: \r\n                <span className=\"info-value\">{props.tempMax-273.15} </span> \r\n                 </p>\r\n              }\r\n              {\r\n                props.tempMin && <p className=\"info-key\"> MinimumTemperature:\r\n                <span className=\"info-value\"> {props.tempMin-273.15} </span>\r\n                 </p>\r\n              }\r\n              {\r\n                props.humidity && <p className=\"info-key\">Humidity:\r\n                <span className=\"info-value\"> {props.humidity} </span>\r\n                </p>\r\n              }\r\n              {\r\n                props.pressure &&  <p className=\"info-key\">Pressure:\r\n                <span className=\"info-value\">{props.pressure}</span> \r\n                 </p> \r\n              }\r\n              {\r\n                props.description &&  <p className=\"info-key\"> Description: \r\n                <span className=\"info-value\">{props.description} </span>\r\n                 </p>\r\n              }\r\n               {\r\n                props.error &&  <p className=\"info-key\"> Error: \r\n                <span className=\"info-value\">{props.error} </span> </p>\r\n              }\r\n            </div>\r\n         );\r\n    }\r\n \r\nexport default Weather;","import React, { Component } from 'react';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nclass Chart extends Component {\r\nconstructor(props){\r\n    super(props)\r\n    this.state={\r\n        chartData:props.ChartData\r\n    }\r\n}\r\nstatic defaultProps = {\r\ndisplayTitle:true,\r\ndisplayLegend: true,\r\nlegendPosition:'right',\r\nlocation:'City'\r\n  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n           <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'Largest Cities In '+this.props.location,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n        <Bar\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'Largest Cities In '+this.props.location,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Chart;\r\n// import React, {Component} from 'react';\r\n// import {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\n// class Chart extends Component{\r\n//   constructor(props){\r\n//     super(props);\r\n//     this.state = {\r\n//       chartData:props.chartData\r\n//     }\r\n//   }\r\n\r\n//   static defaultProps = {\r\n//     displayTitle:true,\r\n//     displayLegend: true,\r\n//     legendPosition:'right',\r\n//     location:'City'\r\n//   }\r\n\r\n//   render(){\r\n//     return (\r\n//       <div className=\"chart\">\r\n//         <Bar\r\n//           data={this.state.chartData}\r\n//           options={{\r\n//             title:{\r\n//               display:this.props.displayTitle,\r\n//               text:'Largest Cities In '+this.props.location,\r\n//               fontSize:25\r\n//             },\r\n//             legend:{\r\n//               display:this.props.displayLegend,\r\n//               position:this.props.legendPosition\r\n//             }\r\n//           }}\r\n//         />\r\n\r\n//         <Line\r\n//           data={this.state.chartData}\r\n//           options={{\r\n//             title:{\r\n//               display:this.props.displayTitle,\r\n//               text:'Largest Cities In '+this.props.location,\r\n//               fontSize:25\r\n//             },\r\n//             legend:{\r\n//               display:this.props.displayLegend,\r\n//               position:this.props.legendPosition\r\n//             }\r\n//           }}\r\n//         />\r\n\r\n//         <Pie\r\n//           data={this.state.chartData}\r\n//           options={{\r\n//             title:{\r\n//               display:this.props.displayTitle,\r\n//               text:'Largest Cities In '+this.props.location,\r\n//               fontSize:25\r\n//             },\r\n//             legend:{\r\n//               display:this.props.displayLegend,\r\n//               position:this.props.legendPosition\r\n//             }\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default Chart;","import React, { Component } from 'react';\nimport Form from './components/form.js';\nimport Weather from './components/weather.js';\nimport './App.css';\nimport Chart from './components/Chart.js'\nconst API_KEY=\"eeb27b4fdf84539b6127f35cd394d622\";\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      temperature:'',\n      tempMax:'',\n      tempMin:'',\n      humidity:'',\n      pressure:'',\n      city:'',\n      country:'',\n      description:'',\n      error:'',\n      charData:{},\n      arrayy:{}\n    }\n  }\n  getWeather= async (e)=>{\n    e.preventDefault()\n  const city=e.target.elements.city.value;\n  const country=e.target.elements.country.value;\n  const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n  const data1= await api.json();  \n  console.log(data1.main)\n  if(city && country){\n  this.setState({\n    arrayy:data1.main,\n    temperature:data1.main.temp,\n    tempMax:data1.main.temp_max,\n    tempMin:data1.main.temp_min,\n    humidity:data1.main.humidity,\n    pressure:data1.main.pressure,\n    city:data1.name,\n    country:data1.sys.country,\n    description:data1.weather[0].description,\n    error:''\n  })}\n  \n  else{\n    this.setState({\n      temperature:'',\n      tempMax:'',\n      tempMin:'',\n      humidity:'',\n      pressure:'',\n      city:'',\n      country:'',\n      description:'',\n      error:'Please Enter Data'\n    })\n  }\n  console.log(this.state.arrayy)\n}\ncomponentShouldUpdate(){\nthis.getChartData();\n}\ngetChartData(){\n  this.setState({\n    chartData:{\n      labels: ['Temperature','Maximum Temperature','Minimu Temperatue','Humidity','Pressur'],\n      datasets:[\n        {\n          label:'Weather',\n      data:this.state.arrayy,\n      backgroundColor:[\n        'rgba(255, 99, 132, 0.6)',\n        'rgba(54, 162, 235, 0.6)',\n        'rgba(255, 206, 86, 0.6)',\n        'rgba(75, 192, 192, 0.6)',\n        'rgba(153, 102, 255, 0.6)',\n      ]\n    }\n  ]\n\n  }})\n}\n\n  \n  render() { \n    return ( \n      <div className=\"Wrapper\">\n        <div className=\"form-container\">\n        <div className=\"div1\">\n      <Form getWeather={this.getWeather}/>\n      <Weather\n      temperature={this.state.temperature}\n      tempMax={this.state.tempMax}\n      tempMin={this.state.tempMin}\n      humidity={this.state.humidity}\n      pressure={this.state.pressure}\n      city={this.state.city}\n      country={this.state.country}\n      description={this.state.description}\n      error={this.state.error}/>\n      </div>\n      <div className=\"div2\">\n      <Chart ChartData={this.state.chartData} Location=\"Massachusetts\" legendPosition=\"bottom\"/>\n      </div>\n      </div>\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}